## Author : Aditya Shakya (adi1090x)
## Mail : adi1090x@gmail.com
## Github : @adi1090x
## Reddit : @adi1090x

// Screen size
screen.w = Window.GetWidth();
screen.h = Window.GetHeight();
screen.half.w = Window.GetWidth() / 2;
screen.half.h = Window.GetHeight() / 2;

// Question prompt
question = null;
answer = null;

// Message
message = null;

// Password prompt
bullets = null;
prompt = null;
bullet.image = Image.Text("*", 1, 1, 1);

// Flow
state.status = "play";
state.time = 0.0;

// Animation
animation_speed = 0.3;

//--------------------------------- Animation states definition -----------------------

// Init sprite from sample image
sample_image = Image("progress-0.png");
sprite = Sprite();
sprite.SetX(screen.half.w - sample_image.GetWidth() / 2);
sprite.SetY(screen.half.h - sample_image.GetHeight() / 2);

# return a hash of a range of images
fun images_hash_from_range(state_hash, start, end)
  {
    state_hash.len = end - start;
    for (i = start; i <= end; i++)
      {
        index = i - start;
        local.images[index] = Image("progress-" + i + ".png");
      }
    return local.images;
  }

# fade-in
fadein.start  = 111;
fadein.end    = 209;
fadein.images = images_hash_from_range(fadein, fadein.start, fadein.end);

# progress-in
progressin.start  = 0;
progressin.end    = 24;
progressin.images = images_hash_from_range(progressin, progressin.start, progressin.end);

# progress-out
progressout.start  = 27;
progressout.end    = 46;
progressout.images = images_hash_from_range(progressout, progressout.start, progressout.end);

# fade-out
fadeout.start  = 47;
fadeout.end    = 110;
fadeout.images = images_hash_from_range(fadeout, fadeout.start, fadeout.end);

am_state = "fadein";
fadein.counter = 0;

fun refresh_callback ()
  {
    if (am_state == "fadein")
      {
        sprite.SetImage(fadein.images[Math.Int(fadein.counter * animation_speed)]);
        if (fadein.counter++ * animation_speed >= fadein.len)
          am_state = "progress";
      }
  }

Plymouth.SetRefreshFunction (refresh_callback);

fun progress_callback (time, progress)
  {
    if (state.status != "pause" && am_state == "progress")
      {
        local.index = Math.Int(progress * progressin.len);
        sprite.SetImage(progressin.images[local.index]);
      }

    MessageCallback("debug: " + progress * 100 + "%");

  }

Plymouth.SetBootProgressFunction (progress_callback);

//------------------------------------- Password prompt -------------------------------
fun DisplayQuestionCallback(prompt, entry) {
    question = null;
    answer = null;

    if (entry == "")
        entry = "<answer>";

    question.image = Image.Text(prompt, 1, 1, 1);
    question.sprite = Sprite(question.image);
    question.sprite.SetX(screen.half.w - question.image.GetWidth() / 2);
    question.sprite.SetY(screen.h - 4 * question.image.GetHeight());

    answer.image = Image.Text(entry, 1, 1, 1);
    answer.sprite = Sprite(answer.image);
    answer.sprite.SetX(screen.half.w - answer.image.GetWidth() / 2);
    answer.sprite.SetY(screen.h - 2 * answer.image.GetHeight());
}
Plymouth.SetDisplayQuestionFunction(DisplayQuestionCallback);

//------------------------------------- Password prompt -------------------------------
fun DisplayPasswordCallback(nil, bulletCount) {
    state.status = "pause";
    totalWidth = bulletCount * bullet.image.GetWidth();
    startPos = screen.half.w - totalWidth / 2;

    prompt.image = Image.Text("Enter Password", 1, 1, 1);
    prompt.sprite = Sprite(prompt.image);
    prompt.sprite.SetX(screen.half.w - prompt.image.GetWidth() / 2);
    prompt.sprite.SetY(screen.h - 4 * prompt.image.GetHeight());

    // Clear all bullets (user might hit backspace)
    bullets = null;
    for (i = 0; i < bulletCount; i++) {
        bullets[i].sprite = Sprite(bullet.image);
        bullets[i].sprite.SetX(startPos + i * bullet.image.GetWidth());
        bullets[i].sprite.SetY(screen.h - 2 * bullet.image.GetHeight());
    }
}
Plymouth.SetDisplayPasswordFunction(DisplayPasswordCallback);

//--------------------------- Normal display (unset all text) ----------------------
fun DisplayNormalCallback() {
    state.status = "play";
    bullets = null;
    prompt = null;
    message = null;
    question = null;
    answer = null;
}
Plymouth.SetDisplayNormalFunction(DisplayNormalCallback);

//----------------------------------------- Message --------------------------------
fun MessageCallback(text) {
    message.image = Image.Text(text, 1, 1, 1);
    message.sprite = Sprite(message.image);
    message.sprite.SetPosition(screen.half.w - message.image.GetWidth() / 2, message.image.GetHeight());
}
Plymouth.SetMessageFunction(MessageCallback);

